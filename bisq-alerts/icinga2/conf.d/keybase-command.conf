object NotificationCommand "keybase-notifications-command" {
  import "plugin-notification-command"

  env.HOME = "/var/lib/nagios"
  command = {{

    log(LogDebug, "keybase-notifications", "Sending notification...reading user configuration")
    var plugin_output_max_length_from_config = macro("$keybase_notifications_plugin_output_max_length$")
    var plugin_output_max_length = Math.round(plugin_output_max_length_from_config)
    var keybase_proxy = macro("$keybase_notifications_proxy$")
    var keybase_channel = macro("$keybase_notifications_channel$")
    var keybase_botname = macro("$keybase_notifications_botname$")
    var icinga2_base_url = macro("$keybase_notifications_icinga2_base_url$")
    var keybase_icon_dictionary = macro("$keybase_notifications_icon_dictionary$")
    var keybase_color_dictionary = macro("$keybase_notifications_color_dictionary$")
    var configuration = {
        "vars.keybase_notifications_plugin_output_max_length" = plugin_output_max_length,
        "vars.keybase_notifications_channel" = keybase_channel,
        "vars.keybase_notifications_proxy" = keybase_proxy,
        "vars.keybase_notifications_botname" = keybase_botname,
        "vars.keybase_notifications_icinga2_base_url" = icinga2_base_url
        "vars.keybase_notifications_icon_dictionary" = keybase_icon_dictionary
        "vars.keybase_notifications_color_dictionary" = keybase_color_dictionary
    }
    log(LogDebug, "keybase-notifications", "Sending notification...read user configuration successfully: " + Json.encode(configuration))

    log(LogDebug, "keybase-notifications", "Sending notification...reading notification data")
    var notification_type = macro("$notification.type$")
    var notification_author = macro("$notification.author$")
    var notification_comment = macro("$notification.comment$")
    var notification_operator = macro("$host.vars.operator$")
    var icinga_long_date_time = macro("$icinga.long_date_time$")
    var icinga_timet = macro("$icinga.timet$")
    var service_name = macro("$service.name$")
    var service_display_name = macro("$service.display_name$")
    var service_state = macro("$service.state$")
    var service_check_attempt = macro("$service.check_attempt$")
    var service_last_state = macro("$service.last_state$")
    var service_output = macro("$service.output$")
    var host_name = macro("$host.name$")
    var host_display_name = macro("$host.display_name$")
    var host_state = macro("$host.state$")
    var host_check_attempt = macro("$host.check_attempt$")
    var host_last_state = macro("$host.last_state$")
    var host_output = macro("$host.output$")
    var notification_data = {
        "notification.type" = notification_type,
        "notification.author" = notification_author,
        "notification.comment" = notification_comment,
        "notification.operator" = notification_operator,
        "icinga.long_date_time" = icinga_long_date_time,
        "icinga.timet" = icinga_timet,
        "service.name" = service_name,
        "service.display_name" = service_display_name,
        "service.state" = service_state,
        "service.check_attempt" = service_check_attempt,
        "service.last_state" = service_last_state,
        "service.output" = service_output,
        "host.name" = host_name,
        "host.display_name" = host_display_name,
        "host.state" = host_state,
        "host.check_attempt" = host_check_attempt,
        "host.last_state" = host_last_state,
        "host.output" = host_output,
    }
    log(LogDebug, "keybase-notifications", "Sending notification...read notification data successfully: " + Json.encode(notification_data))

    log(LogDebug, "keybase-notifications", "Sending notification...choosing icon")
    var notification_type_custom_text = ""
    if(notification_type == "CUSTOM"){
        notification_type_custom_text = "(Author: " + notification_author + ", Message: " + notification_comment + ")"
    }

    var cmd_proxy = ""
    if(keybase_proxy != "") {
        cmd_proxy = "--proxy "+keybase_proxy
    }

    try {
        var icon = keybase_icon_dictionary.get(notification_type)
    } except {
        var icon = "bell"
    }

    log(LogDebug, "keybase-notifications", "Sending notification...chose icon successfully: " + icon)

    log(LogDebug, "keybase-notifications", "Sending notification...generating notification text")

    try {
        var short_host_output = host_output.substr(0, plugin_output_max_length)
    } except {
        var short_host_output = "No result from the latest host check."
    }

    var short_host_output = host_output.substr(0, plugin_output_max_length)
    var text = "error crafting payload"
    var attachments = [{ "text" = "error crafting attachment" }]
    var fields = "Host: " + host_name + "\n"
    var fallback = "Error generating fallback text"
    var mainTitle = "error determining title"
    var output = "unknown"
    var authorField = "Author: " + notification_author + "\n"
    var commentField = "Comment: " + notification_comment + "\n"
    var operatorField = "Operator: " + notification_operator + "\n"

    if(service_name != null) {
        try {
          var color = keybase_color_dictionary.get(service_state)
        }except {
          var color = "#000"
        }

        var serviceField = "Service: " + service_name + "\n"
        fields += serviceField

        try {
            var short_service_output = service_output.substr(0, plugin_output_max_length)
        } except {
            var short_service_output = "No result from the latest service check."
        }

        var short_service_output = service_output.substr(0, plugin_output_max_length)
        var service_state_text = " transitioned from state " + service_last_state + " to state " + service_state
        if(service_last_state == service_state) {
            service_state_text = " is still in state " + service_state
        }

        mainTitle = ":" + icon + ": " + notification_type + ": Service " + service_name + service_state_text
        output = short_service_output
        fallback = notification_type + notification_type_custom_text + ": Service " + service_name + service_state_text + " on host " + host_name + ". Plugin output: ```" + short_service_output + "```"
    } else {
        try {
          var color = keybase_color_dictionary.get(host_state)
        } except {
          var color = "#000"
        }

        var host_state_text = " transitioned from state " + host_last_state + " to state " + host_state
        if(host_last_state == host_state) {
            host_state_text = " is still in state " + host_state
        }

        output = short_host_output
        mainTitle = ":" + icon + ": " + notification_type + ": Host " + host_name + host_state_text
        fallback = notification_type + ": Host " + host_name + host_state_text + ". Plugin output: ```" + short_host_output + "```"
    }

    if(notification_comment){
      fields += commentField
    }
    if(notification_author) {
      fields += authorField
    }
    if(notification_operator) {
      fields += operatorField
    }


    text = "```" + output + "```"
    attachments = mainTitle + "\n" + text + "\n" + fields
    log(LogDebug, "keybase-notifications", "Sending notification...generated notification text successfully: " + text)
    log(LogDebug, "keybase-notifications", attachments)

    log(LogDebug, "keybase-notifications", "Generating notification command")
    var payload_json = Json.encode(attachments)
    var keybase_payload = attachments
    var payload_argument = escape_shell_arg(keybase_payload)
    var cmd = [
                "keybase",
                "chat",
                "send",
                "--channel", keybase_channel, keybase_botname,
                payload_argument
    ]
    var notification_command = cmd.join(" ")
    log(LogDebug, "keybase-notifications", "Generated notification command successfully: " + notification_command)

    return notification_command
  }}
}
